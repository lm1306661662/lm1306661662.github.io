select  name 相当于定义变量  将value值赋给变量
<body>
    <form action="" method="post">
        <select name="cous_id">
            {% for cou in cous %}
                <option value="{{ cou.id }}">{{ cou.c_name}}</option>
            {% endfor %}
        </select>
        <input type="submit" value="提交">
    </form>
</body>

1.模板
  标签：{% tag %}{% endtag %}
        for/if/ifequal/extends/block/comment

  变量：{{ var}}
  
  父模板：block块 挖坑
        {% block xxx %}
        {% endblock %}
  
子模板index.html：
        {%  extends 'base.html' %}继承
        {% block xxx %}

        {% endblock %}

	{{block.super}}:将block块之前定义的内容拿过来
2.引入css/js
  <link href='/static/xxx.css' rel='stylesheet'/>
  
  <link href='{% static 'xxx.css'%}' rel='stylesheet'/>
  settings 中添加：
  STATICFILES_DIRS=[os.path.join(BASE_DIR,'static')]
3.标签
	{% for k in stus %}
	{% endfor %}
	{% if xxx == 1 %}
	{% endif %}
	{% ifequal xxx xxx %}
	{% endif %}

datetime.datetime.strptime('YY-mm-dd HH:MM:SS) 转换时间



爷爷（base.html）的房子四外漏风  儿子继承进行装修（base_main.html）  孙子继承（index.html）
装修{% block ‘装修哪里’%}{% endblock %}
继承{% extends '爸爸' %}
在原来的基础上装修{{ block.super }}
样式  引入static（配置settings.py :STATICFILES_DIRS=[
    os.path.join(BASE_DIR,'static')
]）
第一种：<link href="/static/css/index.css" rel="stylesheet">
第二种： 
{% load static %}
 <link href="{% static 'css/index.css' %}" rel="stylesheet">

可以看到<!-- -->（看到的是未完成的要完成{%block c%}{%endblock%}）
不能看到的{#    #}
{% for x in xxx %}
{% endfor }

茶{{forloop.counter}}(默认1可以是0)
倒茶{{forloop.revcounter}}

1拿出手机如果猜对了给红包1付钱，如果没猜对除了1剩下的人平分
{#{% if forloop.counter == 1 %}#}
{% ifequal forloop.counter 1%}
      <em style="color:red;">{{stu.s_name}}</em>
{% else %}
      {{stu.s_name}}
{% endifequal %}

过滤器==气管炎   |  通道（交流） 
1、add ：将value的值增加2。使用形式为：{{ value | add: "2"}}。
2、addslashes：在value中的引号前增加反斜线。使用形式为：{{ value | addslashes }}。
3、capfirst：value的第一个字符转化成大写形式。使用形式为：{{ value | capfirst }}。
4、cut：从给定value中删除所有arg的值。使用形式为：{{ value | cut:arg}}。
5、date: 格式化时间格式。使用形式为：{{ value | date:"Y-m-d H:i:s" }}
6、default：如果value是False，那么输出使用缺省值。使用形式：{{ value | default: "nothing" }}。例如，如果value是“”，那么输出将是nothing
7、default_if_none：如果value是None，那么输出将使用缺省值。使用形式：{{ value | default_if_none:"nothing" }}，例如，如果value是None，那么输出将是nothing
8、dictsort：如果value的值是一个字典，那么返回值是按照关键字排序的结果
使用形式：{{ value | dictsort:"name"}}，例如，
如果value是：
[{'name': 'python'},{'name': 'java'},{'name': 'c++'},]
那么，输出是：
[{'name': 'c++'},{'name': 'java'},{'name': 'python'}, ]
9、dictsortreversed：如果value的值是一个字典，那么返回值是按照关键字排序的结果的反序。使用形式：与dictsort过滤器相同。
10、divisibleby：如果value能够被arg整除，那么返回值将是True。使用形式：{{ value | divisibleby:arg}}，如果value是9，arg是3，那么输出将是True
11、escape：替换value中的某些字符，以适应HTML格式。使用形式：{{ value | escape}}。例如，< 转化为 &lt;> 转化为 &gt;' 转化为  &#39;" 转化为  &quot;
13、filesizeformat：格式化value，使其成为易读的文件大小。使用形式：{{ value | filesizeformat }}。例如：13KB，4.1MB等。
14、first：返回列表/字符串中的第一个元素。使用形式：{{ value | first }}
16、iriencode：如果value中有非ASCII字符，那么将其进行转化成URL中适合的编码，如果value已经进行过URLENCODE，改操作就不会再起作用。使用形式：{{value | iriencode}}
17、join：使用指定的字符串连接一个list，作用如同python的str.join(list)。使用形式：{{ value | join:"arg"}}，如果value是['a','b','c']，arg是'//'那么输出是a//b//c
18、last：返回列表/字符串中的最后一个元素。使用形式：{{ value | last }}
19、length：返回value的长度。使用形式：{{ value | length }}
20、length_is：如果value的长度等于arg的时候返回True。使用形式：{{ value | length_is:"arg"}}。例如：如果value是['a','b','c']，arg是3，那么返回True
21、linebreaks：value中的"\n"将被<br/>替代，并且整个value使用</p>包围起来。使用形式：{{value|linebreaks}}
22、linebreaksbr：value中的"\n"将被<br/>替代。使用形式：{{value |linebreaksbr}}
23、linenumbers：显示的文本，带有行数。使用形式：{{value | linenumbers}}
24、ljust：在一个给定宽度的字段中，左对齐显示value。使用形式：{{value | ljust}}
25、center：在一个给定宽度的字段中，中心对齐显示value。使用形式：{{value | center}}
26、rjust：：在一个给定宽度的字段中，右对齐显示value。使用形式：{{value | rjust}}
27、lower：将一个字符串转换成小写形式。使用形式：{{value | lower}}
30、random：从给定的list中返回一个任意的Item。使用形式：{{value | random}}
31、removetags：删除value中tag1,tag2....的标签。使用形式：{{value | removetags:"tag1 tag2 tag3..."}}
32、safe：当系统设置autoescaping打开的时候，该过滤器使得输出不进行escape转换。使用形式：{{value | safe}}
33、safeseq：与safe基本相同，但有一点不同的就是：safe是针对字符串，而safeseq是针对多个字符串组成的sequence
34、slice：与python语法中的slice相同。使用形式：{{some_list | slice:"2"}}
37、striptags：删除value中的所有HTML标签.使用形式：{{value | striptags}}
38、time：格式化时间输出。使用形式：{{value | time:"H:i"}}或者{{value | time}}
39、title：转换一个字符串成为title格式。
40、truncatewords：将value切成truncatewords指定的单词数目。使用形式：{{value | truncatewords:2}}。例如，如果value是Joel is a slug 那么输出将是：Joel is ...
42、upper：转换一个字符串为大写形式
43、urlencode：将一个字符串进行URLEncode
46、wordcount：返回字符串中单词的数目








