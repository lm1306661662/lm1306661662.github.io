upload_to='article'将图片二进制文件放入到article中

用中间件进行登录验证
    def process_request(self, request):
        # 屏蔽掉登录和注册的url，不需要做登录验证，不屏蔽掉会无限重定向
        not_check = ['/user/login/', '/user/register/']
        path = request.path
        if path in not_check:
            # 不继续执行以下代码了，直接去执行视图函数
            return None
        token = request.COOKIES.get('token')
        if not token:
            # cookie中没有登录的标识符，跳转到登录页面
            return HttpResponseRedirect(reverse('user:login'))
        user_token = UserToken.objects.filter(token=token).first()
        if not user_token:
            # token 标识符有误，跳转到登录页面
			# 必须做出处理  要不然会循环调用process_request			
            return HttpResponseRedirect(reverse('user:login'))

        # 给全局request对象修改user属性值，修改为当前登录系统用户
        request.user = user_token.user
        return None

    def process_response(self, request,response):
        return response



上传图片 <input type="file" name = "img">
上传标题 <input type="text" name = "title">
展示图片<img src="/media/{{article.img}}>
展示标题{{article.title}}
上传和展示图片需要修改的配置
settings.py：
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
urls.py：
# 将media文件夹解析为静态文件夹
# django在debug为True的情况下，就可以访问media文件夹下的内容
urlpatterns += static(MEDIA_URL,document_root=MEDIA_ROOT)

views.py:
def add_article(request):
    if request.method == 'GET':
        return  render(request, 'article.html')
    if request.method == 'POST':
        # 获取数据
        img = request.FILES.get('img')
        title = request.POST.get('title')
        desc = request.POST.get('desc')
        # 创建文章
        Article.objects.create(img=img,
                               title=title,
                               desc=desc
                               )
        return HttpResponse('创建图片成功')
def show_article(request,id):
    if request.method == 'GET':
        article = Article.objects.get(pk=id)
        return render(request, 'show_article.html', {'article': article})

分页查看
views.py:
  page = request.GET.get('page',1)
        # 查询所有文章对象，并进行分页
        articles = Article.objects.all()
        # 将所有文章进行分页，每一页最多三条数据
        paginator = Paginator(articles,3)
        # 获取那一页的文章信息
        arts = paginator.page(page)
        return render(request, 'arts.html', {'arts':arts})
html:
{%block content%}

{%for art in arts%}
        <p>{{art.id}}</p>标题：{{art.title}}
{%endfor%}
<p>
    {% if arts.has_previous %}
     <a href="{%url 'user:articles'%}?page={{arts.previous_page_number}}">上一页</a>
    {% endif %}
    {% for i in arts.paginator.page_range %}
    <a href="{%url 'user:articles'%}?page={{i}}" >{{i}}</a>
    {% endfor %}
    {% if arts.has_next %}
    <a href="{%url 'user:articles'%}?page={{arts.next_page_number}}">下一页</a>
    {%endif%}
</p>
{%endblock%}



